#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# A simple script to Logout, Shutdown, Reboot, Suspend, Hibernate and Change User via ConsoleKit and UPower...
# (C) 2010 Eugenio "g7" Paolantonio, <me@medesimo.eu>. All rights reserved.
# Work released under the terms of the GNU GPL license, version 3 or later.
#

import os, sys, time
import glob
import pygtk, gtk, gtk.gdk, gtk.glade
pygtk.require("2.0")
import dbus
import threading

import ConfigParser as cfg

import t9n.library
_ = t9n.library.translation_init("semplice-utilities")
gtk.glade.bindtextdomain("semplice-utilities", "/usr/share/locale")
gtk.glade.textdomain("semplice-utilities")

glade = "/usr/share/semplice-utilities/logout/logout.glade" # The glade gui.
#glade = "/home/g7/semplice/emily/util/semplice-utilities-1.13.0/logout.glade"
action = False
HOME = os.getenv("HOME")

cfile = os.path.join(HOME, ".semplice-logout")

actions = {"lock":_("Lock Screen"), "logout":_("Logout"), "switch":_("Switch User"), "suspend":_("Suspend"), "hibernate":_("Hibernate"), "shutdown":_("Shutdown"), "reboot":_("Reboot"), "switch_guest":_("Guest session")}
sctions = {0:"last", 1:"lock", 2:"logout", 3:"switch", 4:"suspend", 5:"hibernate", 6:"shutdown", 7:"reboot", 8:"switch_guest"}
snoitcs = {"last":0, "lock":1, "logout":2, "switch":3, "suspend":4, "hibernate":5, "shutdown":6, "reboot":7, "switch_guest":8}

# Open the system bus.
bus = dbus.SystemBus()

# Connect to logind
ld = dbus.Interface(bus.get_object("org.freedesktop.login1", "/org/freedesktop/login1"), "org.freedesktop.login1.Manager")

def error(error,exit=None):
	print >>sys.stderr, "\aE: " + error
	if exit != None:
		sys.exit(exit)

def help():
	print(_("SYNTAX: %s [option]") % sys.argv[0])
	print
	print(_(" --lock			- Locks the screen"))
	print(_(" --logout		- Exits from this Openbox session."))
	print(_(" --switch-user		- Switch user (lightdm)."))
	print(_(" --switch-to-guest		- Switch to the guest session (lightdm)."))
	print(_(" --switch-to <user>		- Switch to <user> (lightdm)."))
	print(_(" --suspend		- Uses UPower to suspend the system."))
	print(_(" --hibernate		- Uses UPower to hibernate the system."))
	print(_(" --shutdown		- Uses ConsoleKit to shutdown the system."))
	print(_(" --reboot		- Uses ConsoleKit to reboot the system."))
	print(_(" --reboot-install	- Internal (used by installer)."))
	print(_(" --last			- Last action (or action selected in config)."))
	print
	print(_(" --settings		- Configure semplice-logout behaviour."))

def get_n_parse(obj, sect, opt):
	""" Get and parse an option value """
	
	value = obj.get(sect, opt)
	if not value: return False
	
	if value.lower() in ("true","enabled"):
		return True
	elif value.lower() in ("false","disabled"):
		return False
	elif value.lower() in ("none"):
		return None
	else:
		return value

# Core
class core:
	def delete_pcmanfm_socket(self):
		""" This function will delete all user's pcmanfm sockets (if any) for the current user in /tmp. """
		try:
			for socket in glob.glob("/tmp/.pcmanfm-socket-*-" + os.getenv("USER")):
				os.remove(socket)
		except:
			# Nothing faulty will happen if the socket is not removed; the user will just cannot open the file manager, a reboot will fix the problem.
			pass
	
	def write_action_to_file(self, act):
		""" Writes the action on ~/.lastlogoutchoice, which Alan's logout.py will parse. """
		
		if not lock:
			# Write
			config.set("Last", "last_action", act)
			with open(cfile, "w") as f:
				config.write(f)
		
		#actions = {"lock":0, "logout":1, "switch":2, "suspend":3, "hibernate":4, "shutdown":5, "reboot":6}
		#if not os.path.exists(os.path.join(HOME, ".lastlogoutchoice.lock")):
		#	with open(os.path.join(HOME, ".lastlogoutchoice"), "w") as f:
		#		f.write(str(actions[act]) + "\n")
	
	def do_reboot(self, one=False, two=False):
		self.write_action_to_file("reboot")
		ld.Reboot(True)
	
	def do_shutdown(self, one=False, two=False):
		self.write_action_to_file("shutdown")
		ld.PowerOff(True)
	
	def do_logout(self, one=False, two=False):
		# Delete pcmanfm socket, if the user will login again will not be able to open pcmanfm
		self.delete_pcmanfm_socket()
		self.write_action_to_file("logout")
		os.system("openbox --exit")
	
	def do_suspend(self, one=False, two=False):
		# First, lock the screen
		self.do_lock(write=False)
		# Then suspend
		self.write_action_to_file("suspend")
		ld.Suspend(True)
	
	def do_hibernate(self, one=False, two=False):
		# First, lock the screen
		self.do_lock(write=False)
		# Then hibernate
		self.write_action_to_file("hibernate")
		ld.Hibernate(True)
	
	def do_lock(self, one=False, two=False, write=True):
		if write: self.write_action_to_file("lock")
		os.system("xscreensaver-command --lock")
	
	def do_switch(self):
		# First, lock the screen
		self.do_lock(write=False)
		# Then switch
		self.write_action_to_file("switch")
		os.system("dm-tool switch-to-greeter")
	
	def do_switch_guest(self):
		# First, lock the screen
		self.do_lock(write=False)
		# Then switch
		self.write_action_to_file("switch_guest")
		os.system("dm-tool switch-to-guest")
	
	def do_switch_to(self, user):
		# First, lock the screen
		self.do_lock(write=False)
		# Then switch (do not write.)
		os.system("dm-tool switch-to-user %s" % user)


##### MAIN INTERFACE #####
class SettingsGUI:
	def quit(self, pinco):
		
		# Write configuration
		with open(cfile, "w") as f:
			config.write(f)
		
		gtk.main_quit()
	
	def show_dialog(self, obj):
		""" Handle show_dialog checkbox. """
		
		status = obj.get_active()
		if status == True:
			config.set("Logout", "show_dialog", "True")
		else:
			config.set("Logout", "show_dialog", "False")
	
	def last_choice(self, obj):
		""" Handle last choice. """
		
		active = sctions[obj.get_active()]
		
		if not active == "last":
			config.set("Last", "lock", "True") # Ensure it is locked
			config.set("Last", "last_action", active)
		else:
			config.set("Last", "lock", "False") # Unlock.
			config.set("Last", "last_action", "None") # Reset last_action
	
	def defaults(self):
		""" Reads configuration file to set choices at first open. """
		
		show_dialog = get_n_parse(config, "Logout", "show_dialog")
		last_action = get_n_parse(config, "Last", "last_action")
		lock = get_n_parse(config, "Last", "lock")
		
		# Set combosel
		if not lock or last_action == "last":
			# No lock, so it is use_last_action
			self.combosel.set_active(0)
		else:
			self.combosel.set_active(snoitcs[last_action])
		
		# Set show_dialog
		
		if show_dialog:
			self.cbox.set_active(True)
		else:
			self.cbox.set_active(False)
		
	def __init__(self):
		if not os.path.isfile(glade):
			error(_("%s doesn't exists. Can't open GUI - use the command line frontend instead." % (glade)),1)
				
		builder = gtk.Builder()
		builder.add_from_file(glade)
		
		self.theme = gtk.icon_theme_get_default()
		
		self.settingsw = builder.get_object("logout_settings")
		

		self.settingsw.connect("destroy",self.quit)
		# Get buttons
		self.close = builder.get_object("close_button")
		# Connect button
		self.close.connect("clicked",self.quit)
		
		# Combobox of selection radiobutton
		self.combosel = builder.get_object("combosel")
		self.combosel_list = builder.get_object("combosel_list")

		self.combosel.set_model(self.combosel_list)
		cell = gtk.CellRendererText()
		self.combosel.pack_start(cell, True)
		self.combosel.add_attribute(cell, 'text',0)

		# Dialog checkbox
		self.cbox = builder.get_object("show_dialog")

		# Defaults
		self.defaults()

		# Connect
		self.combosel.connect("changed", self.last_choice)		
		self.cbox.connect("clicked", self.show_dialog)

		self.settingsw.show()

class GUI:	
	class timer(threading.Thread):
		def __init__(self, text, window, do):
			self.num = 60 # The seconds after automatically shutdown, reboot, etc.
			
			self.text = text
			self.stopped = False
			self.do = do
			self.window = window
			threading.Thread.__init__(self)
		
		def run(self):
			while self.num != 0:
				if self.stopped:
					return None
				self.window.format_secondary_markup(self.text + " (-<b>%d</b>)" % self.num)
				#print "-%d" % self.num
				self.num -= 1
				time.sleep(1)
			self.do()
		
		def stop(self):
			self.stopped = True
	
	def quit(self, one=False, nogtk=False):
		self.singlew.hide()
		self.tim.stop()
		gtk.gdk.threads_leave()
		
		if not nogtk:
			gtk.main_quit()
	
	def act_helper(self, one=False):
		self.act()
		self.quit()
	
	def connect_single(self):
		""" This will set all things needed by action. """
		
		self.closetext = _("<i>This will <b>close</b> all running applications.</i>")
		self.suspendtext = _("<i>On resume, all running applications will be <b>restored</b>.</i>")
		self.livetext = _("<i>If prompted for a password, insert <b>live</b>.</i>")
		self.suffix = _(" your system")
		
		if action == _("Reboot") or action == _("Reboot (Select no to launch Live System)") or action == _("Shutdown") or action == _("Logout"):
			text = self.closetext
			suffix = self.suffix
		elif action == _("Suspend") or action == _("Hibernate"):
			text = self.suspendtext
			suffix = self.suffix
		elif action == _("Lock Screen"): # if we are here via Lock Screen, we're on live.
			text = self.livetext
			suffix = ""
			self.act = self.sclass.do_lock
			iconname = "system-lock-screen"
		
		if action == _("Reboot") or action == _("Reboot (Select no to launch Live System)"):
			iconname = "stock_refresh"
			self.act = self.sclass.do_reboot
		elif action == _("Shutdown"):
			iconname = "system-shutdown"
			self.act = self.sclass.do_shutdown
		elif action == _("Logout"):
			iconname = "system-log-out"
			suffix = ""
			self.act = self.sclass.do_logout
		elif action == _("Suspend"):
			iconname = "system-suspend"
			self.act = self.sclass.do_suspend
		elif action == _("Hibernate"):
			iconname = "system-hibernate"
			self.act = self.sclass.do_hibernate
		
		try:
			icon = gtk.image_new_from_pixbuf(self.theme.load_icon(iconname, 48, 0))
			icon.show()
		except:
			pass
		
		self.yes.connect("clicked",self.act_helper)
		
		self.singlew.set_title(action)
		
		try:
			self.singlew.set_icon(self.theme.load_icon(iconname, 16, 0))
			self.singlew.set_image(icon)
		except:
			pass

		self.singlew.set_markup(_("<big><b>Do you <u>really</u> want to <i>%s</i>?</b></big>") % action.lower())
		#self.singlew.format_secondary_markup(text)
		
		# Start timer class.
		self.tim = self.timer(text, self.singlew, self.act_helper)
		self.tim.start()
		
	def __init__(self, sclass):
		if not os.path.isfile(glade):
			error(_("%s doesn't exists. Can't open GUI - use the command line frontend instead." % (glade)),1)
		
		self.sclass = sclass
		
		builder = gtk.Builder()
		builder.add_from_file(glade)
		
		self.theme = gtk.icon_theme_get_default()
		
		self.singlew = builder.get_object("single")
		self.multiw = builder.get_object("multi")
		
		if action:
			# Single window.
			self.singlew.connect("destroy",self.quit)
			# Get buttons
			self.no = builder.get_object("no_button")
			self.yes = builder.get_object("yes_button")
			# Connect no button
			self.no.connect("clicked",self.quit)
			self.connect_single()
			
			if show:
				self.singlew.show()
			else:
				# Do, then quit
				self.act_helper()

# Load configuration object
config = cfg.SafeConfigParser()

# Create configuration file, if not any
if not os.path.exists(cfile):
	# Create it.
	config.add_section("Logout")
	config.set("Logout", "show_dialog", "True") # Show logout dialog by default.
	
	config.add_section("Last")
	config.set("Last", "last_action", "None")
	config.set("Last", "lock", "False") # Do not lock by default.
	
	# Write.
	with open(cfile, "w") as f:
		config.write(f)

# Read.
config.read(cfile)

# Get options
show = get_n_parse(config, "Logout", "show_dialog")

lock = get_n_parse(config, "Last", "lock")

gtk.gdk.threads_init()
c = core()

if len(sys.argv) == 1 or sys.argv[1] == "--help":
	help()
	sys.exit(0)
elif sys.argv[1] == "--logout":
	action = _("Logout")
elif sys.argv[1] == "--suspend":
	action = _("Suspend")
elif sys.argv[1] == "--hibernate":
	action = _("Hibernate")
elif sys.argv[1] == "--shutdown":
	action = _("Shutdown")
elif sys.argv[1] == "--reboot":
	action = _("Reboot")
elif sys.argv[1] == "--reboot-install":
	action = _("Reboot (Select no to launch Live System)")
elif sys.argv[1] == "--switch-user":
	action = "switch"
elif sys.argv[1] == "--switch-to-guest":
	action = "switch_guest"
elif sys.argv[1] == "--switch-to":
	action = "switch_to"
	user = sys.argv[2] # Needs checking, but hey, we do really need it? It's great that this application has an help message! ;)
elif sys.argv[1] == "--lock":
	action = _("Lock Screen")
elif sys.argv[1] == "--last":
	# Get last
	last = get_n_parse(config, "Last", "last_action")
	if last:
		action = actions[last]
elif sys.argv[1] == "--settings":
	# Launch settings :D
	action = "Settings"

if not action:
	error("%s is not a valid action." % (sys.argv[1]))
	help()
	sys.exit(1)
elif action == _("Lock Screen"):
	if not os.path.exists("/etc/semplice-live-mode"):
		# Needs result control
		c.do_lock()
		sys.exit(0)
elif action == "switch":
	c.do_switch()
	# Needs result control
	sys.exit(0)
elif action == "switch_guest":
	c.do_switch_guest()
	# Needs result control
	sys.exit(0)
elif action == "switch_to":
	c.do_switch_to(user)
	# Needs result control
	sys.exit(0)

if action == "Settings":
	# Launch settings
	g = SettingsGUI()
else:
	g = GUI(c)

gtk.main()
