#!/bin/bash

#
# mirrorselect: select the fastest mirror from a list!
# Copyright (C) 2010-12 Semplice Team. All rights reserved.
# This script is released under the terms of the GNU GPL license, version 3 or later.
#

semplice_list="/usr/share/semplice-utilities/mirrorselect/semplice.list"
semplice_sources="/etc/apt/sources.list.d/semplice.list"
semplice_changes_sources="/etc/apt/sources.list.d/changes.list"

debian_sources="/etc/apt/sources.list"

VERSION="1.0"
INTERACTIVE="y"
SET="semplice"
SRC_ENABLE=""
PROTO="http://"

SEMPLICE_DISTRO="unstable"
DEBIAN_DISTRO="unstable"

error() {
  echo -e "\033[1;31m$1\033[m" >&2
  if [ -z "$2" ]; then
   exit 1
  else
   exit $2
  fi
}


help() {
	echo "$0 <option> - Checks which mirror is the fastest."
	echo ""
	echo "Available arguments:"
	echo "   -s <set>       - 'debian', 'semplice' or 'changes' (default: 'semplice')"
	echo "   -d <distro>    - Distribution to use (default is '$SEMPLICE_DISTRO' for semplice, '$DEBIAN_DISTRO' for debian)"
	echo "   -o             - Enable sources (disabled by default)"
	echo "   -f             - Use FTP protocol if available."
	echo "   -n             - Non-interactive."
	echo "   -u             - Do not update database after mirror selection."
	echo "   -h|--help      - This message"
	echo "   -v             - Displays the version."
	echo -e "\nBugs to: launchpad.net/semplice-utilities"
}

semplice_parse() {
	# The mirrors are written in a local file. No need to parse it.
	if [ ! -e "$semplice_list" ]; then
		error "The mirror list ($semplice_list) doesn't exist. Aborting."
	fi
	list="`cat $semplice_list`"
	if [ -z "$is_changes" ]; then
		sources="$semplice_sources"
	else
		sources="$semplice_changes_sources"
	fi
}

debian_parse() {
	wget ftp://ftp.debian.org/debian/README.mirrors.html -O /tmp/.debian-mirrors.html || error "Unable to download the mirrors file."
	
	list="`grep '<a rel=\"nofollow\" href=' /tmp/.debian-mirrors.html | grep '<td' | cut -d '>' -f2 | cut -d '\"' -f4 | grep $PROTO`"
	sources="$debian_sources"
}

do_test() {
	#if [ ! -e "$sources" ]; then
	#	error "The sources file ($sources) doesn't exist. Aborting."
	#fi
	
	if [ "$INTERACTIVE" = "y" ]; then
		read -p "This will overwrite $sources. You really want to continue? [y/n]: " scelta
		if [ "$scelta" = "n" ]; then
			exit 0
		elif [ "$scelta" != "y" ]; then
			error "You must use y or n."
		fi
	fi
	
	# The mirrors should be in one line...
	for mirror in $list; do
		mirror_list="$mirror_list $mirror"
	done
	
	res="`netselect -v $mirror_list`"
	if [ "$?" != "0" ]; then
		error "netselect encountred an error. Exiting."
	fi
	
	result="`echo $res | awk '{ print $2 }'`"
	
	echo "This is the fastest mirror: $result"
	echo "Re-generating $sources..."
	cat > $sources <<EOF
# $sources, generated by mirrorselect $VERSION
deb $result $DISTRO main contrib non-free
EOF
	# Should enable deb-src?
	if [ "$SRC_ENABLE" ]; then
		cat >> $sources <<EOF
deb-src $result $DISTRO main contrib non-free
EOF
	else
		cat >> $sources <<EOF
#deb-src $result $DISTRO main contrib non-free
EOF
	fi
	echo "Generation done. Refreshing pacakge database..."
	if [ -z "$NOUPDATE" ]; then
		apt-get update || error "apt-get update encountred an error."
	fi
	echo "Done. Enjoy your new mirror!"
}

parseargs() {
	for arg in "$@"; do
		case "$1" in
			-s)
				shift
				SET="$1"
				shift;;
			-d)
				shift
				DISTRO="$1"
				shift;;
			-n)
				shift
				INTERACTIVE="n";;
			-u)
				shift
				NOUPDATE="y";;
			-f)
				shift
				PROTO="ftp://";;
			-o)
				shift
				SRC_ENABLE="True";;
			-h|--help)
				help
				exit 0;;
			-v)
				echo "mirrorselect version $VERSION"
				exit 0;;
			*)
				rej="$rej $1"
				shift;;
		esac
	done
	_rej=${rej//" "/""}
	if [ "$_rej" ]; then
		echo "Illegal option(s):$rej"
		help
		exit 1
	fi
}

parseargs "$@"
[ -z "$DISTRO" ] && [ "$SET" = "semplice" ] && DISTRO=$SEMPLICE_DISTRO
[ -z "$DISTRO" ] && [ "$SET" = "changes" ] && DISTRO=changes-$SEMPLICE_DISTRO
[ -z "$DISTRO" ] && [ "$SET" = "debian" ] && DISTRO=$DEBIAN_DISTRO

if [ "$USER" != "root" ]; then
	error "You must be root to use mirrorselect."
fi

# Begin...
if [ "$SET" = "semplice" ]; then
	semplice_parse
elif [ "$SET" = "debian" ]; then
	debian_parse
elif [ "$SET" = "changes" ]; then
	is_changes="y"
	semplice_parse
else
	error "Set $SET not supported. Aborting."
fi

do_test
exit 0
